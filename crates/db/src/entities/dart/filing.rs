//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.1

use sea_orm::entity::prelude::*;
use types::company::DartId;
use types::filing::ReceiptNumber;

#[cfg(test)]
use sea_orm::IntoActiveModel;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(schema_name = "dart", table_name = "filing")]
#[cfg_attr(test, derive(fake::Dummy))]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false, column_type = "Text")]
    pub dart_id: DartId,
    #[sea_orm(column_type = "Text")]
    pub report_name: String,
    #[sea_orm(column_type = "Text")]
    pub receipt_number: ReceiptNumber,
    #[sea_orm(column_type = "Text")]
    pub filer_name: String,
    pub receipt_date: Date,
    #[sea_orm(column_type = "Text")]
    pub remark: String,
    pub created_at: DateTime,
    pub updated_at: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

impl ActiveModelBehavior for ActiveModel {}

#[cfg(test)]
impl fake::Dummy<fake::Faker> for ActiveModel {
    fn dummy_with_rng<R: rand::Rng + ?Sized>(config: &fake::Faker, rng: &mut R) -> Self {
        let model = Model::dummy_with_rng(config, rng);
        model.into_active_model()
    }
}
