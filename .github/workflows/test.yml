# This is the main CI workflow that runs the test suite on all pushes to main and all pull requests.
# It runs the following jobs:
# - required: runs the test suite on ubuntu with stable and beta rust toolchains
# - minimal: runs the test suite with the minimal versions of the dependencies that satisfy the requirements of this crate, and its dependencies
# - os-check: runs the test suite on Mac and Windows
# - coverage: runs the test suite and collects coverage information
# See check.yml for information about how the concurrency cancellation and workflow triggering work

name: test

env:
  RUST_LOG: ${{ vars.RUST_LOG }}

permissions:
  contents: read

on:
  push:
    branches: [ main ]
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  required:
    name: ubuntu / ${{ matrix.toolchain }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # run on stable and beta to ensure that tests won't break on the next version of the rust
        toolchain: [ stable, beta ]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Install ${{ matrix.toolchain }}
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.toolchain }}
        # enable this ci template to run regardless of whether the lockfile is checked in or not
      - name: cargo generate-lockfile
        if: hashFiles('Cargo.lock') == ''
        run: cargo generate-lockfile
      - name: cargo install nextest
        uses: taiki-e/install-action@nextest
      - run: cargo nextest run --locked --workspace --all-features --all-targets
        # Nextest currently [doesn't support doctests](https://github.com/nextest-rs/nextest/issues/16)
        # For `cargo test`, there's an issue that [cargo test --all-targets does not run doc tests](https://github.com/rust-lang/cargo/issues/6669)
      - run: cargo test --doc --locked --workspace --all-features
  # run cargo test on Mac and Windows
  os-check:
    runs-on: ${{ matrix.os }}
    name: ${{ matrix.os }} / stable
    strategy:
      fail-fast: false
      matrix:
        # Removed `windows-latest` as it's not compatible with `libsql-sys` version 0.8
        # ref: <https://github.com/tursodatabase/libsql/issues/1763>
        os: [ macos-latest ]
    steps:
      # if your project needs OpenSSL, uncomment this to fix Windows builds.
      # it's commented out by default as the installation command takes 5-10m.
      #
      # - run: echo "VCPKG_ROOT=$env:VCPKG_INSTALLATION_ROOT" | Out-File -FilePath $env:GITHUB_ENV -Append
      #   if: runner.os == 'Windows'
      # - run: vcpkg install openssl:x64-windows-static-md
      #   if: runner.os == 'Windows'
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Install stable
        uses: dtolnay/rust-toolchain@stable
      - name: cargo generate-lockfile
        if: hashFiles('Cargo.lock') == ''
        run: cargo generate-lockfile
      - name: cargo install nextest
        uses: taiki-e/install-action@nextest
      - name: cargo nextest run
        run: cargo nextest run --workspace --locked --all-features --all-targets
  coverage:
    # Use llvm-cov to build and collect coverage and outputs in a format that is compatible with codecov.io.
    #
    # Note that codecov as of v4 requires that CODECOV_TOKEN from:
    #   https://app.codecov.io/gh/<user or org>/<project>/settings
    #
    # This is set in two places on your repo:
    # - https://github.com/jonhoo/guardian/settings/secrets/actions
    # - https://github.com/jonhoo/guardian/settings/secrets/dependabot
    # (the former is necessary for codecov uploads to work with Dependabot PRs)
    #
    # PRs coming from forks of your repo will not have access to the token,
    # but for those, codecov allows uploading coverage reports without a token.
    # It's all a little weird and inconvenient.
    # See <https://github.com/codecov/feedback/issues/112> for lots of more discussion
    runs-on: ubuntu-latest
    name: ubuntu / stable / coverage
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
        # use nightly to use the `coverage(off))` attribute
      - name: Install nightly
        uses: dtolnay/rust-toolchain@nightly
        with:
          components: llvm-tools-preview
      - name: cargo generate-lockfile
        if: hashFiles('Cargo.lock') == ''
        run: cargo generate-lockfile
      - name: cargo install nextest
        uses: taiki-e/install-action@nextest
      - name: cargo install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov
        # Use nextest as default.
        # You can use `--codecov` to use region coverage, but [the way Codecov shows region/branch coverage is not very good.](https://github.com/taiki-e/cargo-llvm-cov/pull/255#issuecomment-1513318191)
      - name: cargo llvm-cov nextest
        run: cargo llvm-cov nextest --locked --workspace --all-features --lcov --output-path lcov.info
      - name: Record Rust version
        run: echo "RUST=$(rustc --version)" >> "$GITHUB_ENV"
      - name: Upload to codecov.io
        uses: codecov/codecov-action@v4
        with:
          files: "lcov.info"
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}
          env_vars: OS,RUST
